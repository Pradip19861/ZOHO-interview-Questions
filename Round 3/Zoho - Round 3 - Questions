1. Super Store

  Build an online shopping interface where buyers and sellers can buy and sell inventory and engage in efficient transactions across a wide range of products.
  
  Modules :
  
  Profile service.
  Inventory service.
  Order service.
  Payment service.
  
  Requirements :
  
  Allow buyers and sellers to register and log in.
  Allow sellers to manage their inventory of products. (Operations : addItem(), updateItem())
  Allow buyers to add items to the cart, place the order, and make payment (Operations: listInventory(), butItem(), addToCart(), makePayment ()).
  Orders should be validated against inventory.
  Password validation and encryption.

2.  Design a Call taxi booking application
-There are n number of taxi’s. For simplicity, assume 4. But it should work for any number of taxi’s.
-The are 6 points(A,B,C,D,E,F)
-All the points are in a straight line, and each point is 15kms away from the adjacent points.
-It takes 60 mins to travel from one point to another
-Each taxi charges Rs.100 minimum for the first 5 kilometers and Rs.10 for the subsequent kilometers.
-For simplicity, time can be entered as absolute time. Eg: 9hrs, 15hrs etc.
-All taxi’s are initially stationed at A.
-When a customer books a Taxi, a free taxi at that point is allocated
-If no free taxi is available at that point, a free taxi at the nearest point is allocated.
-If two taxi’s are free at the same point, one with lower earning is allocated
-Note that the taxi only charges the customer from the pickup point to the drop point. Not the distance it travels from an adjacent point to pickup the customer.
-If no taxi is free at that time, booking is rejected

Design modules for

  i) Call taxi booking 
    Input 1:
    Customer ID: 1
    Pickup Point: A
    Drop Point: B
    Pickup Time: 9
    
    Output 1:
    Taxi can be allotted.
    Taxi-1 is allotted
    
    Input 2:
    Customer ID: 2
    Pickup Point: B
    Drop Point: D
    Pickup Time: 9
    
    Output 1:
    Taxi can be allotted.
    Taxi-2 is allotted 
    (Note: Since Taxi-1 would have completed its journey when second booking is done, so Taxi-2 from nearest point A which is free is allocated)
    
    
    Input 3:
    Customer ID: 3
    Pickup Point: B
    Drop Point: C
    Pickup Time: 12
    
    Output 1:
    Taxi can be allotted.
    Taxi-1 is allotted

    ii) Display the Taxi details
        Taxi No:    Total Earnings:
        BookingID    CustomerID    From    To    PickupTime    DropTime    Amount
           
        Output:
        Taxi-1    Total Earnings: Rs. 400
        
        1     1     A    B    9    10    200
        3    3    B    C    12    13    200
        
        Taxi-2 Total Earnings: Rs. 350
        2    2    B    D    9    11    350 

3. Here we have to develop a simple railway ticket booking application.
  Develop a Railway Reservation Application contains
  1.AC coach
  2.Non AC coach
  3.Seater
  
  each should contain 60 seats and 10 waiting list max allowed rest request should be
  cancelled.
  
  you should have
  
  1.Ticket Booking
  
  2.Ticket Cancellation
  
  3.Status Checking
  
  Here they asked us to create a "Railway reservation system" and gave us 4 modules.
  The modules were:
  1.Booking
  2.Availability checking
  3.Cancellation
  4.Prepare chart
  We were asked to create the modules for representing each data first and to
  continue with the implementation phase.
  
  A matrix game was given with 5 rules. We were asked to implement each of the rules
  separately.
  
  R3  | -   -   - |
  R2  | -   -   - |
  R1  | -   -   - |
        c1  c2  c3
  Each of the 9 cells can either be empty or filled with an atom. R3, R2, R1 are the
  rays that originate from the left. C1, C2, C3 are the rays that originate from the
  bottom of the box.
  
  Input : Position of the atoms and the rays that gets originated from the outside of
  the box.
  
  Eg.   3
        3 1
        2 2
        1 3
        3
        R3 C1 C3
        
        Output : Print the box.
        
        
        Rule 1:
        A ray that has an atom in its path should print 'H' (Hit) If it does not have any
        atoms in its path, the ray should pass to the other side.
              C1  H   C3
        R3  | -   -   - | R3
        H   | -   X   - | H
        R1  | -   -   - | R1
              C1  H   C3
              
        Rule 2 & 3:
        A ray that has an atom in its diagonal adjacent position should refract.
        
        H   | -   -   - | H
        H   | X   -   - | H
        R   | -   X   - | R
              R   H   R
              
        Input rays: R1, R2, C3
        
        H   | -   X   - | 
        R2  | -   -   - | C3
            | -   -   - | 
              R2      C3
        
        Rule 4:
        A ray that has atoms in both of the diagonal adjacent positions should reflect back.
        Input ray: C2
            | -   -   - | 
            | x   -   x | 
            | -   -   - | 
                  R
                  
        R2 ray:Input
            | -   x   - | 
          R | -   -   - | 
            | -   x   - | 
        
        Rule 5:
        The deflection of rays should happen in the order of the input rays.
        
        Input Rays: R3, R2, C1, C3
        
          H | -   x   - | 
          R2| -   -   - | C3 
            | -   -   - | 
              R2      C3
              
      The final task was to implement these rules for dynamic matrix size.
      
      Input : no of rows, no of columns
            Eg. ) 4 4 (row & column)
            2 (No of atoms)
            4 4 (Position of atom)
            2 2 (Position of atom)
            2 (No of rays)
            R4 C2 (Ray number)
          R  | -   -   -  X | 
             | -   -   -  - | 
             | -   X   -  - | 
             | -   -   -  - | 
                  H